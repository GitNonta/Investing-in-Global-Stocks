import streamlit as st
import requests
import pandas as pd
import yfinance as yf
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Navigation Links
st.markdown("""
<div style="background-color: #f0f2f6; padding: 10px; border-radius: 10px; margin-bottom: 20px;">
    <h4>üìñ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</h4>
    <p>
        <a href="/" target="_self">üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a> | 
        <a href="/1_Basics_of_Investment" target="_self">üìò ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô</a> | 
        üìä <strong>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô</strong> | 
        <a href="/3_Forex_and_Risk" target="_self">üí± ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</a> | 
        <a href="/4_About_and_Tips" target="_self">üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ</a>
    </p>
</div>
""", unsafe_allow_html=True)

st.header("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á")
st.write("‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data_source = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", ["Alpha Vantage (API)", "Yahoo Finance (yfinance)"], index=1)

symbol = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô AAPL, MSFT):", "AAPL")

if data_source == "Yahoo Finance (yfinance)" and symbol:
    try:
        # ‡πÉ‡∏ä‡πâ yfinance ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        stock = yf.Ticker(symbol)
        hist = stock.history(period="1y")
        
        if not hist.empty:
            st.subheader(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol.upper()}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏î‡πâ‡∏ß‡∏¢ Plotly
            fig = go.Figure()
            fig.add_trace(go.Candlestick(
                x=hist.index,
                open=hist['Open'],
                high=hist['High'],
                low=hist['Low'],
                close=hist['Close'],
                name=symbol.upper()
            ))
            
            fig.update_layout(
                title=f"‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô {symbol.upper()}",
                yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (USD)",
                xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
            col1, col2, col3, col4 = st.columns(4)
            latest = hist.iloc[-1]
            prev_close = hist.iloc[-2]['Close']
            change = latest['Close'] - prev_close
            change_pct = (change / prev_close) * 100
            
            with col1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"${latest['Close']:.2f}", f"{change:+.2f}")
            with col2:
                st.metric("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á %", f"{change_pct:+.2f}%")
            with col3:
                st.metric("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"${latest['High']:.2f}")
            with col4:
                st.metric("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"${latest['Low']:.2f}")
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(hist.tail().round(2))
            
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô")
            
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Alpha Vantage API ‡πÅ‡∏ó‡∏ô")

elif data_source == "Alpha Vantage (API)" and symbol:
    API_KEY = "81WH16M23KTGFE8G"
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Daily Time Series ‡∏à‡∏≤‡∏Å Alpha Vantage
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&outputsize=compact&apikey={API_KEY}"
        r = requests.get(url)
        data = r.json()
        
        if "Time Series (Daily)" in data:
            df = pd.DataFrame.from_dict(data["Time Series (Daily)"], orient="index")
            df = df.rename(columns={
                "1. open":"Open",
                "2. high":"High",
                "3. low":"Low",
                "4. close":"Close",
                "6. volume":"Volume"
            })
            df = df.astype(float)
            df.index = pd.to_datetime(df.index)
            df = df.sort_index()
            
            st.subheader(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol.upper()} (Alpha Vantage)")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
            st.line_chart(df["Close"])
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest = df.iloc[-1]
            prev_close = df.iloc[-2]['Close'] if len(df) > 1 else latest['Close']
            change = latest['Close'] - prev_close
            change_pct = (change / prev_close) * 100 if prev_close != 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"${latest['Close']:.2f}", f"{change:+.2f}")
            with col2:
                st.metric("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á %", f"{change_pct:+.2f}%")
            with col3:
                st.metric("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"${latest['High']:.2f}")
            with col4:
                st.metric("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"${latest['Low']:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(df.tail().round(2))
            
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô / API Key")
            if "Note" in data:
                st.warning("‚ö†Ô∏è API Rate limit - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Yahoo Finance ‡πÅ‡∏ó‡∏ô")
                
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Alpha Vantage: {str(e)}")
        st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Yahoo Finance ‡πÅ‡∏ó‡∏ô")

# Popular Stock Examples
st.markdown("### üìà ‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°")
col1, col2, col3, col4 = st.columns(4)

popular_stocks = [
    ("AAPL", "Apple"),
    ("MSFT", "Microsoft"), 
    ("TSLA", "Tesla"),
    ("GOOGL", "Google")
]

for i, (ticker, name) in enumerate(popular_stocks):
    with [col1, col2, col3, col4][i]:
        if st.button(f"{ticker}\n{name}", use_container_width=True):
            st.rerun()

# Navigation Buttons
st.markdown("---")
col1, col2, col3 = st.columns([1, 2, 1])

with col1:
    if st.button("‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", use_container_width=True):
        st.switch_page("pages/1_Basics_of_Investment.py")

with col3:
    if st.button("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‚Üí", use_container_width=True):
        st.switch_page("pages/3_Forex_and_Risk.py")
