import streamlit as st
import requests
import pandas as pd
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import ALPHA_VANTAGE_API_KEY, DEFAULT_STOCK_SYMBOLS, ALPHA_VANTAGE_BASE_URL

try:
    import yfinance as yf
    import plotly.graph_objects as go
    from datetime import datetime, timedelta
    ADVANCED_FEATURES = True
except ImportError:
    ADVANCED_FEATURES = False
    st.warning("‚ö†Ô∏è ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ yfinance ‡πÅ‡∏•‡∏∞ plotly ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install yfinance plotly")

# Configuration
st.set_page_config(
    page_title="Stock Analysis - Global Stock Guide", 
    page_icon="üìä", 
    layout="wide"
)

# Icons for menu items
menu_icons = {
    "home": "<img src='https://cdn-icons-png.flaticon.com/512/1946/1946436.png' width='20' style='vertical-align:middle;margin-right:6px;'>",
    "basics": "<img src='https://cdn-icons-png.flaticon.com/512/3135/3135715.png' width='20' style='vertical-align:middle;margin-right:6px;'>",
    "analysis": "<img src='https://cdn-icons-png.flaticon.com/512/2721/2721297.png' width='20' style='vertical-align:middle;margin-right:6px;'>",
    "forex": "<img src='https://cdn-icons-png.flaticon.com/512/3135/3135706.png' width='20' style='vertical-align:middle;margin-right:6px;'>",
    "tips": "<img src='https://cdn-icons-png.flaticon.com/512/1828/1828884.png' width='20' style='vertical-align:middle;margin-right:6px;'>"
}

# Modern Menu Bar
st.markdown(f"""
<style>
.menu-container {{background: linear-gradient(90deg, #2C3E50 0%, #3498DB 50%, #9B59B6 100%);padding: 0.8rem 0;margin: -1rem -1rem 2rem -1rem;box-shadow: 0 2px 10px rgba(0,0,0,0.1);position: sticky;top: 0;z-index: 999;}}
.menu-nav {{max-width: 1200px;margin: 0 auto;display: flex;justify-content: space-between;align-items: center;padding: 0 2rem;}}
.logo {{font-size: 1.5rem;font-weight: bold;color: white;text-decoration: none;}}
.menu-items {{display: flex;gap: 2rem;align-items: center;}}
.menu-item {{color: white;text-decoration: none;padding: 0.5rem 1rem;border-radius: 20px;transition: all 0.3s ease;font-weight: 500;font-size: 0.95rem;display: flex;align-items: center;}}
.menu-item:hover {{background: rgba(255,255,255,0.2);color: white;transform: translateY(-2px);text-decoration: none;}}
.menu-item.active {{background: rgba(255,255,255,0.3);color: white;}}
.menu-icon {{margin-right: 0.5rem;}}
@media (max-width: 768px) {{.menu-nav {{flex-direction: column;padding: 1rem;}}.menu-items {{margin-top: 1rem;flex-wrap: wrap;gap: 1rem;}}}}
</style>

<div class="menu-container">
    <div class="menu-nav">
        <div class="logo">üåç Global Stocks</div>
    </div>
</div>
""", unsafe_allow_html=True)

# Navigation Menu
col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    if st.button("üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
        st.switch_page("streamlit_app.py")
with col2:
    if st.button("üìò ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô", use_container_width=True):
        st.switch_page("pages/1_Basics_of_Investment.py")
with col3:
    if st.button("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô", use_container_width=True, type="primary"):
        st.rerun()
with col4:
    if st.button("üí± ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", use_container_width=True):
        st.switch_page("pages/3_Forex_and_Risk.py")
with col5:
    if st.button("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö", use_container_width=True):
        st.switch_page("pages/4_About_and_Tips.py")

st.divider()

st.header("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á")
st.write("‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if ADVANCED_FEATURES:
    data_source = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", ["Alpha Vantage (API)", "Yahoo Finance (yfinance)"], index=1)
else:
    data_source = "Alpha Vantage (API)"
    st.info("üìå ‡πÉ‡∏ä‡πâ Alpha Vantage API (‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)")

symbol = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô AAPL, MSFT):", "AAPL")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
st.markdown("### üìà ‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
cols = st.columns(4)
for i, stock in enumerate(DEFAULT_STOCK_SYMBOLS[:8]):
    with cols[i % 4]:
        if st.button(f"{stock}", key=f"stock_{stock}", use_container_width=True):
            # ‡πÉ‡∏ä‡πâ st.rerun() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô symbol
            st.session_state.selected_symbol = stock
            st.rerun()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å button ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if 'selected_symbol' in st.session_state:
    symbol = st.session_state.selected_symbol

if data_source == "Yahoo Finance (yfinance)" and symbol and ADVANCED_FEATURES:
    try:
        # ‡πÉ‡∏ä‡πâ yfinance ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        stock = yf.Ticker(symbol)
        hist = stock.history(period="1y")
        
        if not hist.empty:
            st.subheader(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol.upper()}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏î‡πâ‡∏ß‡∏¢ Plotly
            fig = go.Figure()
            fig.add_trace(go.Candlestick(
                x=hist.index,
                open=hist['Open'],
                high=hist['High'],
                low=hist['Low'],
                close=hist['Close'],
                name=symbol.upper()
            ))
            
            fig.update_layout(
                title=f"‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô {symbol.upper()}",
                yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (USD)",
                xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
            col1, col2, col3, col4 = st.columns(4)
            latest = hist.iloc[-1]
            prev_close = hist.iloc[-2]['Close']
            change = latest['Close'] - prev_close
            change_pct = (change / prev_close) * 100
            
            with col1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"${latest['Close']:.2f}", f"{change:+.2f}")
            with col2:
                st.metric("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á %", f"{change_pct:+.2f}%")
            with col3:
                st.metric("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"${latest['High']:.2f}")
            with col4:
                st.metric("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"${latest['Low']:.2f}")
                
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(hist.tail().round(2))
            
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô")
            
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Alpha Vantage API ‡πÅ‡∏ó‡∏ô")

elif (data_source == "Alpha Vantage (API)" and symbol) or (not ADVANCED_FEATURES and symbol):
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Daily Time Series ‡∏à‡∏≤‡∏Å Alpha Vantage
        url = f"{ALPHA_VANTAGE_BASE_URL}?function=TIME_SERIES_DAILY_ADJUSTED&symbol={symbol}&outputsize=compact&apikey={ALPHA_VANTAGE_API_KEY}"
        
        with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol.upper()}..."):
            r = requests.get(url)
            data = r.json()
        
        if "Time Series (Daily)" in data:
            df = pd.DataFrame.from_dict(data["Time Series (Daily)"], orient="index")
            df = df.rename(columns={
                "1. open":"Open",
                "2. high":"High",  
                "3. low":"Low",
                "4. close":"Close",
                "5. adjusted_close":"Adj_Close",
                "6. volume":"Volume"
            })
            df = df.astype(float)
            df.index = pd.to_datetime(df.index)
            df = df.sort_index()
            
            st.subheader(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol.upper()} - Alpha Vantage")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if "Meta Data" in data:
                meta = data["Meta Data"]
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"**‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô:** {meta.get('2. Symbol', symbol)}")
                with col2:
                    st.info(f"**‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {meta.get('3. Last Refreshed', 'N/A')}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
            st.line_chart(data=df[["Close"]], height=400)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest = df.iloc[-1]
            prev_close = df.iloc[-2]['Close'] if len(df) > 1 else latest['Close']
            change = latest['Close'] - prev_close
            change_pct = (change / prev_close) * 100 if prev_close != 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"${latest['Close']:.2f}", f"{change:+.2f}")
            with col2:
                st.metric("üìä ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á %", f"{change_pct:+.2f}%")
            with col3:
                st.metric("‚¨ÜÔ∏è ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô", f"${latest['High']:.2f}")
            with col4:
                st.metric("‚¨áÔ∏è ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô", f"${latest['Low']:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", f"${latest['Open']:.2f}")
            with col2:
                st.metric("üîÑ ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢", f"{latest['Volume']:,.0f}")
            with col3:
                st.metric("üéØ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", f"${latest['Adj_Close']:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            display_df = df.tail(10).copy()
            display_df.index = display_df.index.strftime('%Y-%m-%d')
            st.dataframe(display_df.round(2), use_container_width=True)
            
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏´‡∏∏‡πâ‡∏ô")
            if "Note" in data:
                st.warning("‚ö†Ô∏è API Rate limit - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")
            elif "Error Message" in data:
                st.warning(f"‚ö†Ô∏è {data['Error Message']}")
            st.info("üí° ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Yahoo Finance ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
                
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Alpha Vantage: {str(e)}")
        st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Yahoo Finance ‡πÅ‡∏ó‡∏ô")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö API
st.markdown("---")
with st.expander("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
    st.markdown("""
    **Alpha Vantage API:**
    - ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    - ‚ö†Ô∏è ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 requests ‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞ 500 requests ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏ü‡∏£‡∏µ)
    - üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø
    
    **Yahoo Finance (yfinance):**
    - ‚úÖ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    - ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö Interactive
    - ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: `pip install yfinance plotly`
    """)

# Navigation Buttons
st.markdown("---")
col1, col2, col3 = st.columns([1, 2, 1])

with col1:
    if st.button("‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", use_container_width=True):
        st.switch_page("pages/1_Basics_of_Investment.py")

with col3:
    if st.button("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‚Üí", use_container_width=True):
        st.switch_page("pages/3_Forex_and_Risk.py")
